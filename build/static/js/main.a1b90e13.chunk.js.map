{"version":3,"sources":["api/axios.js","components/GameDashboard.js","components/GamePage.js","App.js","reportWebVitals.js","index.js","components/GamePage.module.css"],"names":["instance","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","console","log","headers","Authorization","error","Promise","reject","BINGO_LETTERS","GameDashboard","selectedNumber","setSelectedNumber","useState","bingoCard","setBingoCard","availableGames","setAvailableGames","isCardSelected","setIsCardSelected","currentPage","setCurrentPage","vantaEffect","setVantaEffect","joiningGame","setJoiningGame","joinCountdown","setJoinCountdown","vantaRef","useRef","bingoCardRef","navigate","useNavigate","useEffect","FOG","el","current","THREE","mouseControls","touchControls","gyroControls","minHeight","minWidth","highlightColor","lowlightColor","baseColor","blurFactor","speed","zoom","destroy","async","response","get","data","games","fetchAvailableGames","numbersToDisplay","Array","from","length","_","i","React","createElement","className","ref","map","number","key","onClick","cardData","card","window","innerWidth","scrollIntoView","behavior","handleNumberClick","handlePrevPage","prevPage","disabled","handleNextPage","letter","index","row","rowIndex","cell","cellIndex","post","cardId","state","alert","game","id","name","status","gameId","countdown","setInterval","prev","clearInterval","joinGame","GamePage","_ref","markedNumbers","setMarkedNumbers","calledNumbers","setCalledNumbers","currentCall","setCurrentCall","setCountdown","timerRef","countdownInterval","startTimer","calledNumbersSet","Set","interval","size","call","Math","floor","random","has","add","getColorClass","styles","red","yellow","blue","orange","green","container","calledNumbersContainer","slice","calledNumber","fadeIn","bingoHeader","bingoHeaderCell","bingoBody","bingoRow","bingoCell","includes","marked","toggleMarkNumber","filter","n","checkBingo","every","rows","some","cols","diag1","diag2","checkBingoButton","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.a1b90e13.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// Create an instance of axios\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:3001', // Replace with your backend URL\r\n});\r\n\r\n// Add a request interceptor to include the JWT token in the Authorization header\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    // Get the token from localStorage\r\n    const token = localStorage.getItem('token');\r\n    console.log('Retrieved token:', token); // Debugging log\r\n\r\n    // If a token is present, set it in the Authorization header\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Do something with the error before it is sent\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport FOG from 'vanta/dist/vanta.fog.min';\r\nimport './GameStyles.css'; // Link to the CSS file\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from '../api/axios';\r\n\r\nconst BINGO_LETTERS = ['B', 'I', 'N', 'G', 'O'];\r\n\r\nconst GameDashboard = () => {\r\n    const [selectedNumber, setSelectedNumber] = useState(null);\r\n    const [bingoCard, setBingoCard] = useState(null);\r\n    const [availableGames, setAvailableGames] = useState([]);\r\n    const [isCardSelected, setIsCardSelected] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [vantaEffect, setVantaEffect] = useState(null);\r\n    const [joiningGame, setJoiningGame] = useState(false); // Track game join status\r\n    const [joinCountdown, setJoinCountdown] = useState(5); // Countdown state\r\n    const vantaRef = useRef(null);\r\n    const bingoCardRef = useRef(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (!vantaEffect) {\r\n            setVantaEffect(\r\n                FOG({\r\n                    el: vantaRef.current,\r\n                    THREE: THREE,\r\n                    mouseControls: true,\r\n                    touchControls: true,\r\n                    gyroControls: false,\r\n                    minHeight: 200.00,\r\n                    minWidth: 200.00,\r\n                    highlightColor: 0xB5FFE9,\r\n                    lowlightColor: 0x8BE8CB,\r\n                    baseColor: 0x50B2C0,\r\n                    blurFactor: 0.90,\r\n                    speed: 2.80,\r\n                    zoom: 0.88\r\n                })\r\n            );\r\n        }\r\n        return () => {\r\n            if (vantaEffect) vantaEffect.destroy();\r\n        };\r\n    }, [vantaEffect]);\r\n\r\n    // Fetch available games from the backend\r\n    useEffect(() => {\r\n        const fetchAvailableGames = async () => {\r\n            try {\r\n                const token = localStorage.getItem('token'); // Adjust this line based on where your token is stored\r\n                const response = await axios.get('/game/availableGames', {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                });\r\n                console.log(\"Available Games:\", response.data.games);\r\n                setAvailableGames(response.data.games);\r\n            } catch (error) {\r\n                console.error('Error fetching available games:', error);\r\n            }\r\n        };\r\n\r\n        fetchAvailableGames();\r\n    }, []);\r\n    \r\n    // Pagination logic\r\n    const handleNextPage = () => {\r\n        setCurrentPage((prevPage) => prevPage === 2 ? 1 : prevPage + 1);\r\n    };\r\n\r\n    const handlePrevPage = () => {\r\n        setCurrentPage((prevPage) => prevPage === 1 ? 2 : prevPage - 1);\r\n    };\r\n\r\n    const numbersToDisplay = currentPage === 1 ? Array.from({ length: 100 }, (_, i) => i + 1) : Array.from({ length: 100 }, (_, i) => i + 101);\r\n\r\n    // Handle selecting a number from the grid\r\n    const handleNumberClick = async (number) => {\r\n        setSelectedNumber(number);\r\n        try {\r\n            console.log(`Fetching card for number: ${number}`); // Debugging log\r\n            // Dynamic fetching of the Bingo card using selected number\r\n            const token = localStorage.getItem('token'); // Retrieve token from localStorage\r\n            const response = await axios.get(`/game/cards/${number}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            console.log('Response:', response); // Debugging log\r\n            const cardData = response.data.card;\r\n            console.log(\"Card Data:\", cardData); \r\n            setBingoCard(cardData);\r\n\r\n            // Scroll to the bingo card on mobile view\r\n            if (window.innerWidth <= 600) {\r\n                bingoCardRef.current.scrollIntoView({ behavior: 'smooth' });\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error fetching bingo card for number ${number}:`, error);\r\n        }\r\n    };\r\n\r\n    // Confirm card selection\r\n    const handleCardSelect = async () => {\r\n        if (selectedNumber) {\r\n            try {\r\n                // Send selected card to the backend\r\n                const token = localStorage.getItem('token'); // Retrieve token from localStorage\r\n                await axios.post('/game/select-card', { cardId: selectedNumber }, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                });\r\n                setIsCardSelected(true);\r\n                navigate('/game', { state: { bingoCard } }); // Redirect to GamePage with bingoCard data\r\n            } catch (error) {\r\n                console.error('Error selecting card:', error);\r\n            }\r\n        } else {\r\n            alert('Please select a number from the grid first!');\r\n        }\r\n    };\r\n\r\n    // Join a game\r\n    const joinGame = async (gameId) => {\r\n        try {\r\n            setJoiningGame(true); // Set status to joining\r\n            const token = localStorage.getItem('token'); // Retrieve token from localStorage\r\n            await axios.post(`/game/join/${gameId}`, {}, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            alert('Joined the game successfully!');\r\n            \r\n            // Countdown logic before prompting for card selection\r\n            const countdown = setInterval(() => {\r\n                setJoinCountdown((prev) => {\r\n                    if (prev === 1) {\r\n                        clearInterval(countdown);\r\n                        setJoiningGame(false); // End joining status\r\n                    }\r\n                    return prev - 1;\r\n                });\r\n            }, 1000);\r\n        } catch (error) {\r\n            console.error('Error joining game:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n        {joiningGame ? (\r\n            <div className=\"joining-status\">\r\n                <h2>Joining game... Countdown: {joinCountdown}</h2>\r\n            </div>\r\n        ) : (\r\n            <div ref={vantaRef} className=\"game-dashboard-container\">  \r\n            <div className=\"left-container\">\r\n                <h1 className=\"welcome-text\">Welcome to the Bingo Game!</h1>\r\n                {!isCardSelected ? (\r\n                    <div className=\"container\">\r\n                        <h2>Select a Number to Get Your Bingo Card</h2>\r\n                        <div className=\"number-grid\">\r\n                            {numbersToDisplay.map((number) => (\r\n                                <div\r\n                                    key={number}\r\n                                    className={`number-grid-item ${selectedNumber === number ? 'selected' : ''}`}\r\n                                    onClick={() => handleNumberClick(number)}\r\n                                >\r\n                                    {number}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"pagination-buttons\">\r\n                            <button onClick={handlePrevPage} disabled={currentPage === 1}>\r\n                                Previous\r\n                            </button>\r\n                            <button onClick={handleNextPage} disabled={currentPage === 2}>\r\n                                Next\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n\r\n            <div className=\"right-container\" ref={bingoCardRef}>\r\n                {selectedNumber && (\r\n                    <div className=\"bingo-card-container\">\r\n                        <h3>Your Bingo Card (Card #{selectedNumber})</h3>\r\n                        <div className=\"bingo-card\">\r\n                            <div className=\"bingo-header\">\r\n                                {BINGO_LETTERS.map((letter, index) => (\r\n                                    <div key={index} className={`bingo-header-cell ${letter}`}>\r\n                                        {letter}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                            <div className=\"bingo-body\">\r\n                                {bingoCard &&\r\n                                    bingoCard.map((row, rowIndex) => (\r\n                                        <div key={rowIndex} className=\"bingo-row\">\r\n                                            {row.map((cell, cellIndex) => (\r\n                                                <div key={cellIndex} className=\"bingo-cell\">\r\n                                                    {cell === '★' ? '★' : cell}\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                        <button onClick={handleCardSelect} className=\"select-card-button\">\r\n                            Confirm Card\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"available-games-container\">\r\n                <h2>Available Games</h2>\r\n                <ul>\r\n                    {availableGames.map((game) => (\r\n                        <li key={game.id}>\r\n                            {game.name} - {game.status}\r\n                            <button onClick={() => joinGame(game.id)}>Join Game</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        )}\r\n    </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default GameDashboard;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './GamePage.module.css';\r\nconst BINGO_LETTERS = ['B', 'I', 'N', 'G', 'O'];\r\n\r\nconst GamePage = ({ bingoCard }) => {\r\n    const [markedNumbers, setMarkedNumbers] = useState([bingoCard[2][2]]); // Automatically mark the center cell\r\n    const [calledNumbers, setCalledNumbers] = useState([]);\r\n    const [currentCall, setCurrentCall] = useState('');\r\n    const [countdown, setCountdown] = useState(5); // Countdown state\r\n    const timerRef = useRef(null); // Use useRef to store the interval ID\r\n\r\n    // Toggle marking a number on the card\r\n    const toggleMarkNumber = (rowIndex, cellIndex) => {\r\n        const number = bingoCard[rowIndex][cellIndex];\r\n        setMarkedNumbers(prev =>\r\n            prev.includes(number) ? prev.filter(n => n !== number) : [...prev, number]\r\n        );\r\n    };\r\n\r\n    // Check if the player has won Bingo\r\n    const checkBingo = () => {\r\n        const isSubset = markedNumbers.every(number => calledNumbers.includes(number));\r\n        if (!isSubset) {\r\n            alert('Not Bingo yet! Keep going!');\r\n            return;\r\n        }\r\n\r\n        const rows = bingoCard.some(row => row.every(number => markedNumbers.includes(number)));\r\n        const cols = bingoCard[0].some((_, i) => bingoCard.every(row => markedNumbers.includes(row[i])));\r\n        const diag1 = bingoCard.every((row, i) => markedNumbers.includes(row[i]));\r\n        const diag2 = bingoCard.every((row, i) => markedNumbers.includes(row[4 - i]));\r\n\r\n        if (rows || cols || diag1 || diag2) {\r\n            alert('Bingo! You win!');\r\n        } else {\r\n            alert('Not Bingo yet! Keep going!');\r\n        }\r\n    };\r\n\r\n    // Update calledNumbers when currentCall changes\r\n    useEffect(() => {\r\n        if (currentCall) {\r\n            setCalledNumbers(prev => [...prev, currentCall]);\r\n        }\r\n    }, [currentCall]);\r\n\r\n    // Countdown effect\r\n    useEffect(() => {\r\n        if (countdown > 0) {\r\n            const countdownInterval = setInterval(() => {\r\n                setCountdown(prev => prev - 1);\r\n            }, 1000);\r\n            return () => clearInterval(countdownInterval);\r\n        }\r\n    }, [countdown]);\r\n\r\n    // Cleanup timer on component unmount\r\n    useEffect(() => {\r\n        const startTimer = () => {\r\n            const calledNumbersSet = new Set(calledNumbers);\r\n\r\n            const interval = setInterval(() => {\r\n                if (calledNumbersSet.size >= 75) {\r\n                    clearInterval(interval);\r\n                    return;\r\n                }\r\n\r\n                let call;\r\n                let number;\r\n                let letter;\r\n                // Generate a unique call\r\n                do {\r\n                    letter = BINGO_LETTERS[Math.floor(Math.random() * BINGO_LETTERS.length)];\r\n                    \r\n                    switch (letter) {\r\n                        case 'B': number = Math.floor(Math.random() * 15) + 1; break;\r\n                        case 'I': number = Math.floor(Math.random() * 15) + 16; break;\r\n                        case 'N': number = Math.floor(Math.random() * 15) + 31; break;\r\n                        case 'G': number = Math.floor(Math.random() * 15) + 46; break;\r\n                        case 'O': number = Math.floor(Math.random() * 15) + 61; break;\r\n                        default: number = Math.floor(Math.random() * 75) + 1;\r\n                    }\r\n\r\n                    call = `${letter}${number}`;\r\n                } while (calledNumbersSet.has(call));\r\n\r\n                calledNumbersSet.add(call);\r\n                setCurrentCall(call);\r\n                setCountdown(5); // Reset countdown\r\n            }, 5000);\r\n\r\n            timerRef.current = interval;\r\n        };\r\n\r\n        startTimer();\r\n        return () => {\r\n            clearInterval(timerRef.current);\r\n        };\r\n    }, [calledNumbers]);\r\n\r\n    const getColorClass = (call) => {\r\n        switch (call[0]) {\r\n            case 'B': return styles.red;\r\n            case 'I': return styles.yellow;\r\n            case 'N': return styles.blue;\r\n            case 'G': return styles.orange;\r\n            case 'O': return styles.green;\r\n            default: return '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.calledNumbersContainer}>\r\n                <h3>Called Numbers</h3>\r\n                <div className={styles.calledNumbers}>\r\n                    {calledNumbers.length > 0 ? calledNumbers.slice(-5).map((call, index) => (\r\n                        <div key={index} className={`${styles.calledNumber} ${getColorClass(call)} ${styles.fadeIn}`}>\r\n                            {call}\r\n                        </div>\r\n                    )) : <div>No numbers called yet</div>}\r\n                </div>\r\n            </div>\r\n            <div className={styles.currentCall}>\r\n                <h3>Current Call</h3>\r\n                {currentCall ? (\r\n                    <div className={`${styles.calledNumber} ${getColorClass(currentCall)} ${styles.fadeIn}`}>\r\n                        {currentCall}\r\n                    </div>\r\n                ) : (\r\n                    <div>No current call</div>\r\n                )}\r\n                <div className={styles.countdown}>\r\n                    Next call in: {countdown} seconds\r\n                </div>\r\n            </div>\r\n            <h2>Game Started</h2>\r\n            <div className={styles.bingoCard}>\r\n                <div className={styles.bingoHeader}>\r\n                    {BINGO_LETTERS.map((letter, index) => (\r\n                        <div key={index} className={`${styles.bingoHeaderCell} ${getColorClass(letter + '1')}`}>\r\n                            {letter}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className={styles.bingoBody}>\r\n                    {bingoCard.map((row, rowIndex) => (\r\n                        <div key={rowIndex} className={styles.bingoRow}>\r\n                            {row.map((cell, cellIndex) => (\r\n                                <div\r\n                                    key={cellIndex}\r\n                                    className={`${styles.bingoCell} ${markedNumbers.includes(cell) ? styles.marked : ''}`}\r\n                                    onClick={() => toggleMarkNumber(rowIndex, cellIndex)}\r\n                                >\r\n                                    {cell}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <button onClick={checkBingo} className={styles.checkBingoButton}>Check Bingo</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GamePage;","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport GameDashboard from './components/GameDashboard';\nimport GamePage from './components/GamePage'; // Replace with actual component names\n\nconst App = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<GameDashboard />} />\n        <Route path=\"/\" element={<GamePage />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GamePage_container__3zKD0\",\"calledNumbersContainer\":\"GamePage_calledNumbersContainer___I8Cj\",\"calledNumbers\":\"GamePage_calledNumbers__2tkqN\",\"calledNumber\":\"GamePage_calledNumber__ss8J7\",\"red\":\"GamePage_red__2WZ-Y\",\"yellow\":\"GamePage_yellow__1aA6Z\",\"blue\":\"GamePage_blue__yAiU_\",\"orange\":\"GamePage_orange__fvYyR\",\"green\":\"GamePage_green__2Lt0q\",\"currentCall\":\"GamePage_currentCall__1EGme\",\"bingoCard\":\"GamePage_bingoCard__5WnrH\",\"bingoHeader\":\"GamePage_bingoHeader__22qCV\",\"bingoHeaderCell\":\"GamePage_bingoHeaderCell__2mzbU\",\"bingoBody\":\"GamePage_bingoBody__1J3RF\",\"bingoRow\":\"GamePage_bingoRow__11CC_\",\"bingoCell\":\"GamePage_bingoCell__1SpqC\",\"marked\":\"GamePage_marked__28MXw\",\"checkBingoButton\":\"GamePage_checkBingoButton__coj9r\",\"fadeIn\":\"GamePage_fadeIn__3dmOf\"};"],"sourceRoot":""}