{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dagio\\\\OneDrive\\\\Documents\\\\Projects\\\\Bingo_React\\\\src\\\\components\\\\GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './GamePage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BINGO_LETTERS = ['B', 'I', 'N', 'G', 'O'];\nconst GamePage = () => {\n  _s();\n  const [selectedNumber, setSelectedNumber] = useState(null);\n  const [bingoCard, setBingoCard] = useState(null);\n  const [markedNumbers, setMarkedNumbers] = useState([]);\n  const [isCardSelected, setIsCardSelected] = useState(false);\n  const [calledNumbers, setCalledNumbers] = useState([]);\n  const [timer, setTimer] = useState(null);\n  const [currentCall, setCurrentCall] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Handle switching between pages for card selection\n  const handleNextPage = () => {\n    setCurrentPage(prevPage => prevPage === 2 ? 1 : prevPage + 1);\n  };\n  const handlePrevPage = () => {\n    setCurrentPage(prevPage => prevPage === 1 ? 2 : prevPage - 1);\n  };\n  const numbersToDisplay = currentPage === 1 ? Array.from({\n    length: 100\n  }, (_, i) => i + 1) : Array.from({\n    length: 100\n  }, (_, i) => i + 101);\n\n  // Handle selecting a number from the grid\n  const handleNumberClick = number => {\n    setSelectedNumber(number);\n    const generatedCard = generateBingoCard(number);\n    setBingoCard(generatedCard);\n    setMarkedNumbers([]);\n    setIsCardSelected(false);\n  };\n\n  // Handle confirming the card selection\n  const handleCardSelect = () => {\n    if (selectedNumber) {\n      setIsCardSelected(true);\n      startTimer();\n    } else {\n      alert('Please select a number from the grid first!');\n    }\n  };\n\n  // Toggle marking a number on the card\n  const toggleMarkNumber = (rowIndex, cellIndex) => {\n    const number = bingoCard[rowIndex][cellIndex];\n    setMarkedNumbers(prev => prev.includes(number) ? prev.filter(n => n !== number) : [...prev, number]);\n  };\n\n  // Check if the player has won Bingo\n  const checkBingo = () => {\n    const rows = bingoCard.some(row => row.every(number => markedNumbers.includes(number)));\n    const cols = bingoCard[0].some((_, i) => bingoCard.every(row => markedNumbers.includes(row[i])));\n    const diag1 = bingoCard.every((row, i) => markedNumbers.includes(row[i]));\n    const diag2 = bingoCard.every((row, i) => markedNumbers.includes(row[4 - i]));\n    if (rows || cols || diag1 || diag2) {\n      alert('Bingo! You win!');\n    } else {\n      alert('Not Bingo yet! Keep going!');\n    }\n  };\n  // Start the timer to call out Bingo numbers\n  const startTimer = () => {\n    const calledNumbersSet = new Set(calledNumbers); // Use a Set to track called numbers\n    const maxNumber = 75; // Maximum number in the Bingo card\n\n    const interval = setInterval(() => {\n      let call;\n      let number;\n      let letter;\n      // Generate a unique call\n      do {\n        letter = BINGO_LETTERS[Math.floor(Math.random() * BINGO_LETTERS.length)];\n        switch (letter) {\n          case 'B':\n            number = Math.floor(Math.random() * 15) + 1;\n            break;\n          case 'I':\n            number = Math.floor(Math.random() * 15) + 16;\n            break;\n          case 'N':\n            number = Math.floor(Math.random() * 15) + 31;\n            break;\n          case 'G':\n            number = Math.floor(Math.random() * 15) + 46;\n            break;\n          case 'O':\n            number = Math.floor(Math.random() * 15) + 61;\n            break;\n          default:\n            number = Math.floor(Math.random() * maxNumber) + 1;\n        }\n        call = `${letter}${number}`;\n      } while (calledNumbersSet.has(call) && calledNumbersSet.size < maxNumber);\n      setCurrentCall(call);\n      setCalledNumbers(prev => [...prev, call]);\n      calledNumbersSet.add(call);\n    }, 5000); // 5-second intervals\n\n    setTimer(interval);\n  };\n  // Cleanup timer on component unmount\n  useEffect(() => {\n    return () => {\n      clearInterval(timer);\n    };\n  }, [timer]);\n  // Toggle dark mode\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    document.body.classList.toggle('dark-mode');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDarkMode,\n      children: darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), !isCardSelected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select a Number to Get Your Bingo Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-grid\",\n        children: numbersToDisplay.map(number => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `number-grid-item ${selectedNumber === number ? 'selected' : ''}`,\n          onClick: () => handleNumberClick(number),\n          children: number\n        }, number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevPage,\n          disabled: currentPage === 1,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          disabled: currentPage === 2,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this), selectedNumber && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bingo-card-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Your Bingo Card (Card #\", selectedNumber, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bingo-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bingo-header\",\n              children: BINGO_LETTERS.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bingo-header-cell\",\n                children: letter\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bingo-body\",\n              children: bingoCard && bingoCard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bingo-row\",\n                children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `bingo-cell ${markedNumbers.includes(cell) ? 'marked' : ''}`,\n                  onClick: () => toggleMarkNumber(rowIndex, cellIndex),\n                  children: cell === '★' ? '★' : cell\n                }, cellIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 53\n                }, this))\n              }, rowIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCardSelect,\n          className: \"select-card-button\",\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Game in progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Call: \", currentCall]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"called-numbers\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Called Numbers History:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"called-numbers-list\",\n          children: calledNumbers.map((call, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"called-number\",\n            children: call\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bingo-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bingo-header\",\n          children: BINGO_LETTERS.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bingo-header-cell\",\n            children: letter\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bingo-body\",\n          children: bingoCard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bingo-row\",\n            children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `bingo-cell ${markedNumbers.includes(cell) ? 'marked' : ''}`,\n              onClick: () => toggleMarkNumber(rowIndex, cellIndex),\n              children: cell === '★' ? '★' : cell\n            }, cellIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 41\n            }, this))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkBingo,\n        children: \"Check Bingo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n// Seeded random number generator\n_s(GamePage, \"XhmfnWTO9IQIiMUl9SqjesiYVMA=\");\n_c = GamePage;\nconst seededRandom = seed => {\n  const x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n};\n\n// Bingo card generation logic with seeded randomness\nconst generateBingoCard = seed => {\n  const card = [];\n  for (let i = 0; i < 5; i++) {\n    const column = [];\n    let min, max;\n    switch (i) {\n      case 0:\n        // B\n        min = 1;\n        max = 15;\n        break;\n      case 1:\n        // I\n        min = 16;\n        max = 30;\n        break;\n      case 2:\n        // N\n        min = 31;\n        max = 45;\n        break;\n      case 3:\n        // G\n        min = 46;\n        max = 60;\n        break;\n      case 4:\n        // O\n        min = 61;\n        max = 75;\n        break;\n      default:\n        min = 1;\n        max = 75;\n    }\n    for (let j = 0; j < 5; j++) {\n      if (i === 2 && j === 2) {\n        column.push('★'); // Free space\n      } else {\n        let num;\n        do {\n          seed++;\n          num = Math.floor(seededRandom(seed) * (max - min + 1)) + min;\n        } while (column.includes(num));\n        column.push(num);\n      }\n    }\n    card.push(column);\n  }\n\n  // Transpose to get correct layout\n  return card[0].map((_, i) => card.map(row => row[i]));\n};\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","BINGO_LETTERS","GamePage","_s","selectedNumber","setSelectedNumber","bingoCard","setBingoCard","markedNumbers","setMarkedNumbers","isCardSelected","setIsCardSelected","calledNumbers","setCalledNumbers","timer","setTimer","currentCall","setCurrentCall","darkMode","setDarkMode","currentPage","setCurrentPage","handleNextPage","prevPage","handlePrevPage","numbersToDisplay","Array","from","length","_","i","handleNumberClick","number","generatedCard","generateBingoCard","handleCardSelect","startTimer","alert","toggleMarkNumber","rowIndex","cellIndex","prev","includes","filter","n","checkBingo","rows","some","row","every","cols","diag1","diag2","calledNumbersSet","Set","maxNumber","interval","setInterval","call","letter","Math","floor","random","has","size","add","clearInterval","toggleDarkMode","document","body","classList","toggle","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","disabled","index","cell","_c","seededRandom","seed","x","sin","card","column","min","max","j","push","num","$RefreshReg$"],"sources":["C:/Users/dagio/OneDrive/Documents/Projects/Bingo_React/src/components/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './GamePage.css';\r\n\r\nconst BINGO_LETTERS = ['B', 'I', 'N', 'G', 'O'];\r\n\r\nconst GamePage = () => {\r\n    const [selectedNumber, setSelectedNumber] = useState(null);\r\n    const [bingoCard, setBingoCard] = useState(null);\r\n    const [markedNumbers, setMarkedNumbers] = useState([]);\r\n    const [isCardSelected, setIsCardSelected] = useState(false);\r\n    const [calledNumbers, setCalledNumbers] = useState([]);\r\n    const [timer, setTimer] = useState(null);\r\n    const [currentCall, setCurrentCall] = useState('');\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n       // Handle switching between pages for card selection\r\n    const handleNextPage = () => {\r\n        setCurrentPage((prevPage) => (prevPage === 2 ? 1 : prevPage + 1));\r\n    };\r\n\r\n    const handlePrevPage = () => {\r\n        setCurrentPage((prevPage) => (prevPage === 1 ? 2 : prevPage - 1));\r\n    };\r\n\r\n    const numbersToDisplay = currentPage === 1 ? Array.from({ length: 100 }, (_, i) => i + 1) : Array.from({ length: 100 }, (_, i) => i + 101);\r\n\r\n      // Handle selecting a number from the grid\r\n    const handleNumberClick = (number) => {\r\n        setSelectedNumber(number);\r\n        const generatedCard = generateBingoCard(number);\r\n        setBingoCard(generatedCard);\r\n        setMarkedNumbers([]);\r\n        setIsCardSelected(false);\r\n    };\r\n\r\n    // Handle confirming the card selection\r\n    const handleCardSelect = () => {\r\n        if (selectedNumber) {\r\n            setIsCardSelected(true);\r\n            startTimer();\r\n        } else {\r\n            alert('Please select a number from the grid first!');\r\n        }\r\n    };\r\n\r\n     // Toggle marking a number on the card\r\n    const toggleMarkNumber = (rowIndex, cellIndex) => {\r\n        const number = bingoCard[rowIndex][cellIndex];\r\n        setMarkedNumbers(prev =>\r\n            prev.includes(number) ? prev.filter(n => n !== number) : [...prev, number]\r\n        );\r\n    };\r\n\r\n     // Check if the player has won Bingo\r\n    const checkBingo = () => {\r\n        const rows = bingoCard.some(row => row.every(number => markedNumbers.includes(number)));\r\n        const cols = bingoCard[0].some((_, i) => bingoCard.every(row => markedNumbers.includes(row[i])));\r\n        const diag1 = bingoCard.every((row, i) => markedNumbers.includes(row[i]));\r\n        const diag2 = bingoCard.every((row, i) => markedNumbers.includes(row[4 - i]));\r\n\r\n        if (rows || cols || diag1 || diag2) {\r\n            alert('Bingo! You win!');\r\n        } else {\r\n            alert('Not Bingo yet! Keep going!');\r\n        }\r\n    };\r\n // Start the timer to call out Bingo numbers\r\n    const startTimer = () => {\r\n        const calledNumbersSet = new Set(calledNumbers);// Use a Set to track called numbers\r\n        const maxNumber = 75; // Maximum number in the Bingo card\r\n\r\n        const interval = setInterval(() => {\r\n            let call;\r\n            let number;\r\n            let letter;\r\n // Generate a unique call\r\n             do {\r\n                letter = BINGO_LETTERS[Math.floor(Math.random() * BINGO_LETTERS.length)];\r\n                \r\n                switch (letter) {\r\n                    case 'B':\r\n                        number = Math.floor(Math.random() * 15) + 1;\r\n                        break;\r\n                    case 'I':\r\n                        number = Math.floor(Math.random() * 15) + 16;\r\n                        break;\r\n                    case 'N':\r\n                        number = Math.floor(Math.random() * 15) + 31;\r\n                        break;\r\n                    case 'G':\r\n                        number = Math.floor(Math.random() * 15) + 46;\r\n                        break;\r\n                    case 'O':\r\n                        number = Math.floor(Math.random() * 15) + 61;\r\n                        break;\r\n                    default:\r\n                        number = Math.floor(Math.random() * maxNumber) + 1;\r\n                }\r\n\r\n                call = `${letter}${number}`;\r\n            } while (calledNumbersSet.has(call) && calledNumbersSet.size < maxNumber);\r\n\r\n            setCurrentCall(call);\r\n            setCalledNumbers(prev => [...prev, call]);\r\n            calledNumbersSet.add(call);\r\n        }, 5000);// 5-second intervals\r\n\r\n        setTimer(interval);\r\n    };\r\n// Cleanup timer on component unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, [timer]);\r\n // Toggle dark mode\r\n    const toggleDarkMode = () => {\r\n        setDarkMode(!darkMode);\r\n        document.body.classList.toggle('dark-mode');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n             {/* Dark mode toggle */}\r\n            <button onClick={toggleDarkMode}>\r\n                {darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\r\n            </button>\r\n            {!isCardSelected ? (\r\n                <div className=\"container\">\r\n                    <h2>Select a Number to Get Your Bingo Card</h2>\r\n                    <div className=\"number-grid\">\r\n                        {numbersToDisplay.map(number => (\r\n                            <div\r\n                                key={number}\r\n                                className={`number-grid-item ${selectedNumber === number ? 'selected' : ''}`}\r\n                                onClick={() => handleNumberClick(number)}\r\n                            >\r\n                                {number}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"pagination-buttons\">\r\n                        <button onClick={handlePrevPage} disabled={currentPage === 1}>Previous</button>\r\n                        <button onClick={handleNextPage} disabled={currentPage === 2}>Next</button>\r\n                    </div>\r\n                    {selectedNumber && (\r\n                        <>\r\n                            <div className=\"bingo-card-container\">\r\n                                <h3>Your Bingo Card (Card #{selectedNumber})</h3>\r\n                                <div className=\"bingo-card\">\r\n                                    <div className=\"bingo-header\">\r\n                                        {BINGO_LETTERS.map((letter, index) => (\r\n                                            <div key={index} className=\"bingo-header-cell\">{letter}</div>\r\n                                        ))}\r\n                                    </div>\r\n                                    <div className=\"bingo-body\">\r\n                                        {bingoCard && bingoCard.map((row, rowIndex) => (\r\n                                            <div key={rowIndex} className=\"bingo-row\">\r\n                                                {row.map((cell, cellIndex) => (\r\n                                                    <div\r\n                                                        key={cellIndex}\r\n                                                        className={`bingo-cell ${markedNumbers.includes(cell) ? 'marked' : ''}`}\r\n                                                        onClick={() => toggleMarkNumber(rowIndex, cellIndex)}\r\n                                                    >\r\n                                                        {cell === '★' ? '★' : cell}\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <button onClick={handleCardSelect} className=\"select-card-button\">\r\n                                Start Game\r\n                            </button>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div className=\"container\">\r\n                    <h3>Game in progress</h3>\r\n                    <p>Current Call: {currentCall}</p>\r\n                    <div className=\"called-numbers\">\r\n                        <h4>Called Numbers History:</h4>\r\n                        <div className=\"called-numbers-list\">\r\n                            {calledNumbers.map((call, index) => (\r\n                                <span key={index} className=\"called-number\">{call}</span>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bingo-card\">\r\n                        <div className=\"bingo-header\">\r\n                            {BINGO_LETTERS.map((letter, index) => (\r\n                                <div key={index} className=\"bingo-header-cell\">{letter}</div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"bingo-body\">\r\n                            {bingoCard.map((row, rowIndex) => (\r\n                                <div key={rowIndex} className=\"bingo-row\">\r\n                                    {row.map((cell, cellIndex) => (\r\n                                        <div\r\n                                            key={cellIndex}\r\n                                            className={`bingo-cell ${markedNumbers.includes(cell) ? 'marked' : ''}`}\r\n                                            onClick={() => toggleMarkNumber(rowIndex, cellIndex)}\r\n                                        >\r\n                                            {cell === '★' ? '★' : cell}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <button onClick={checkBingo}>Check Bingo</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Seeded random number generator\r\nconst seededRandom = (seed) => {\r\n    const x = Math.sin(seed) * 10000;\r\n    return x - Math.floor(x);\r\n};\r\n\r\n// Bingo card generation logic with seeded randomness\r\nconst generateBingoCard = (seed) => {\r\n    const card = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        const column = [];\r\n        let min, max;\r\n\r\n        switch (i) {\r\n            case 0: // B\r\n                min = 1;\r\n                max = 15;\r\n                break;\r\n            case 1: // I\r\n                min = 16;\r\n                max = 30;\r\n                break;\r\n            case 2: // N\r\n                min = 31;\r\n                max = 45;\r\n                break;\r\n            case 3: // G\r\n                min = 46;\r\n                max = 60;\r\n                break;\r\n            case 4: // O\r\n                min = 61;\r\n                max = 75;\r\n                break;\r\n            default:\r\n                min = 1;\r\n                max = 75;\r\n        }\r\n\r\n        for (let j = 0; j < 5; j++) {\r\n            if (i === 2 && j === 2) {\r\n                column.push('★'); // Free space\r\n            } else {\r\n                let num;\r\n                do {\r\n                    seed++;\r\n                    num = Math.floor(seededRandom(seed) * (max - min + 1)) + min;\r\n                } while (column.includes(num));\r\n                column.push(num);\r\n            }\r\n        }\r\n        card.push(column);\r\n    }\r\n\r\n    // Transpose to get correct layout\r\n    return card[0].map((_, i) => card.map(row => row[i]));\r\n};\r\n\r\nexport default GamePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}