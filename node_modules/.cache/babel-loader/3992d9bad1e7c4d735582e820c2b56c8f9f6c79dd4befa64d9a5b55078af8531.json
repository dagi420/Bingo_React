{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./GamePage.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const BINGO_LETTERS=['B','I','N','G','O'];const GamePage=()=>{const[selectedNumber,setSelectedNumber]=useState(null);const[bingoCard,setBingoCard]=useState(null);const[markedNumbers,setMarkedNumbers]=useState([]);const[isCardSelected,setIsCardSelected]=useState(false);const[calledNumbers,setCalledNumbers]=useState([]);const[timer,setTimer]=useState(null);const[currentCall,setCurrentCall]=useState('');const[bingo,setBingo]=useState(false);const[darkMode,setDarkMode]=useState(false);const[currentPage,setCurrentPage]=useState(1);// Handle switching between pages for card selection\nconst handleNextPage=()=>{setCurrentPage(prevPage=>prevPage===2?1:prevPage+1);};const handlePrevPage=()=>{setCurrentPage(prevPage=>prevPage===1?2:prevPage-1);};const numbersToDisplay=currentPage===1?Array.from({length:100},(_,i)=>i+1):Array.from({length:100},(_,i)=>i+101);// Handle selecting a number from the grid\nconst handleNumberClick=number=>{setSelectedNumber(number);const generatedCard=generateBingoCard(number);setBingoCard(generatedCard);setMarkedNumbers([]);setBingo(false);setIsCardSelected(false);};// Handle confirming the card selection\nconst handleCardSelect=()=>{if(selectedNumber){setIsCardSelected(true);startTimer();}else{alert('Please select a number from the grid first!');}};// Toggle marking a number on the card\nconst toggleMarkNumber=(rowIndex,cellIndex)=>{const number=bingoCard[rowIndex][cellIndex];setMarkedNumbers(prev=>prev.includes(number)?prev.filter(n=>n!==number):[...prev,number]);};// Check if the player has won Bingo\nconst checkBingo=()=>{const rows=bingoCard.some(row=>row.every(number=>markedNumbers.includes(number)));const cols=bingoCard[0].some((_,i)=>bingoCard.every(row=>markedNumbers.includes(row[i])));const diag1=bingoCard.every((row,i)=>markedNumbers.includes(row[i]));const diag2=bingoCard.every((row,i)=>markedNumbers.includes(row[4-i]));if(rows||cols||diag1||diag2){setBingo(true);alert('Bingo! You win!');}else{alert('Not Bingo yet! Keep going!');}};// Start the timer to call out Bingo numbers\nconst startTimer=()=>{const calledNumbersSet=new Set(calledNumbers);// Use a Set to track called numbers\nconst maxNumber=75;// Maximum number in the Bingo card\nconst interval=setInterval(()=>{let call;let number;let letter;// Generate a unique call\ndo{letter=BINGO_LETTERS[Math.floor(Math.random()*BINGO_LETTERS.length)];switch(letter){case'B':number=Math.floor(Math.random()*15)+1;// 1-15\nbreak;case'I':number=Math.floor(Math.random()*15)+16;// 16-30\nbreak;case'N':number=Math.floor(Math.random()*15)+31;// 31-45\nbreak;case'G':number=Math.floor(Math.random()*15)+46;// 46-60\nbreak;case'O':number=Math.floor(Math.random()*15)+61;// 61-75\nbreak;default:number=Math.floor(Math.random()*maxNumber)+1;}call=`${letter}${number}`;}while(calledNumbersSet.has(call)&&calledNumbersSet.size<maxNumber);// Ensure it's unique and within range\nsetCurrentCall(call);setCalledNumbers(prev=>[...prev,call]);calledNumbersSet.add(call);// Update the Set with the new call\n},5000);// 5-second intervals\nsetTimer(interval);};// Cleanup timer on component unmount\nuseEffect(()=>{return()=>{clearInterval(timer);};},[timer]);// Toggle dark mode\nconst toggleDarkMode=()=>{setDarkMode(!darkMode);document.body.classList.toggle('dark-mode');};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:toggleDarkMode,children:darkMode?'Switch to Light Mode':'Switch to Dark Mode'}),!isCardSelected?/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Select a Number to Get Your Bingo Card\"}),/*#__PURE__*/_jsx(\"div\",{className:\"number-grid\",children:numbersToDisplay.map(number=>/*#__PURE__*/_jsx(\"div\",{className:`number-grid-item ${selectedNumber===number?'selected':''}`,onClick:()=>handleNumberClick(number),children:number},number))}),/*#__PURE__*/_jsxs(\"div\",{className:\"pagination-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handlePrevPage,disabled:currentPage===1,children:\"Previous\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleNextPage,disabled:currentPage===2,children:\"Next\"})]}),selectedNumber&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bingo-card-container\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Your Bingo Card (Card #\",selectedNumber,\")\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bingo-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"bingo-header\",children:BINGO_LETTERS.map((letter,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"bingo-header-cell\",children:letter},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"bingo-body\",children:bingoCard&&bingoCard.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"bingo-row\",children:row.map((cell,cellIndex)=>/*#__PURE__*/_jsx(\"div\",{className:`bingo-cell ${markedNumbers.includes(cell)?'marked':''}`,onClick:()=>toggleMarkNumber(rowIndex,cellIndex),children:cell==='★'?'★':cell},cellIndex))},rowIndex))})]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCardSelect,className:\"select-card-button\",children:\"Start Game\"})]})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Game in progress\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Current Call: \",currentCall]}),/*#__PURE__*/_jsxs(\"div\",{className:\"called-numbers\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Called Numbers History:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"called-numbers-list\",children:calledNumbers.map((call,index)=>/*#__PURE__*/_jsx(\"span\",{className:\"called-number\",children:call},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bingo-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"bingo-header\",children:BINGO_LETTERS.map((letter,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"bingo-header-cell\",children:letter},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"bingo-body\",children:bingoCard.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"bingo-row\",children:row.map((cell,cellIndex)=>/*#__PURE__*/_jsx(\"div\",{className:`bingo-cell ${markedNumbers.includes(cell)?'marked':''}`,onClick:()=>toggleMarkNumber(rowIndex,cellIndex),children:cell==='★'?'★':cell},cellIndex))},rowIndex))})]}),/*#__PURE__*/_jsx(\"button\",{onClick:checkBingo,children:\"Check Bingo\"})]})]});};// Bingo card generation logic\nconst generateBingoCard=seed=>{const card=[];const random=(min,max)=>Math.floor(Math.random()*(max-min+1))+min;for(let i=0;i<5;i++){const column=[];let min,max;switch(i){case 0:// B\nmin=1;max=15;break;case 1:// I\nmin=16;max=30;break;case 2:// N\nmin=31;max=45;break;case 3:// G\nmin=46;max=60;break;case 4:// O\nmin=61;max=75;break;default:min=1;max=75;}for(let j=0;j<5;j++){let num;do{num=random(min,max);}while(column.includes(num));column.push(num);}card.push(column);}card[2][2]='★';// Middle cell as a star\nreturn card[0].map((_,colIndex)=>card.map(row=>row[colIndex]));};export default GamePage;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","BINGO_LETTERS","GamePage","selectedNumber","setSelectedNumber","bingoCard","setBingoCard","markedNumbers","setMarkedNumbers","isCardSelected","setIsCardSelected","calledNumbers","setCalledNumbers","timer","setTimer","currentCall","setCurrentCall","bingo","setBingo","darkMode","setDarkMode","currentPage","setCurrentPage","handleNextPage","prevPage","handlePrevPage","numbersToDisplay","Array","from","length","_","i","handleNumberClick","number","generatedCard","generateBingoCard","handleCardSelect","startTimer","alert","toggleMarkNumber","rowIndex","cellIndex","prev","includes","filter","n","checkBingo","rows","some","row","every","cols","diag1","diag2","calledNumbersSet","Set","maxNumber","interval","setInterval","call","letter","Math","floor","random","has","size","add","clearInterval","toggleDarkMode","document","body","classList","toggle","children","onClick","className","map","disabled","index","cell","seed","card","min","max","column","j","num","push","colIndex"],"sources":["C:/Users/dagio/OneDrive/Documents/Projects/Bingo_React/src/components/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './GamePage.css';\r\n\r\nconst BINGO_LETTERS = ['B', 'I', 'N', 'G', 'O'];\r\n\r\nconst GamePage = () => {\r\n    const [selectedNumber, setSelectedNumber] = useState(null);\r\n    const [bingoCard, setBingoCard] = useState(null);\r\n    const [markedNumbers, setMarkedNumbers] = useState([]);\r\n    const [isCardSelected, setIsCardSelected] = useState(false);\r\n    const [calledNumbers, setCalledNumbers] = useState([]);\r\n    const [timer, setTimer] = useState(null);\r\n    const [currentCall, setCurrentCall] = useState('');\r\n    const [bingo, setBingo] = useState(false);\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    // Handle switching between pages for card selection\r\n    const handleNextPage = () => {\r\n        setCurrentPage((prevPage) => (prevPage === 2 ? 1 : prevPage + 1));\r\n    };\r\n\r\n    const handlePrevPage = () => {\r\n        setCurrentPage((prevPage) => (prevPage === 1 ? 2 : prevPage - 1));\r\n    };\r\n\r\n    const numbersToDisplay = currentPage === 1 ? Array.from({ length: 100 }, (_, i) => i + 1) : Array.from({ length: 100 }, (_, i) => i + 101);\r\n\r\n    // Handle selecting a number from the grid\r\n    const handleNumberClick = (number) => {\r\n        setSelectedNumber(number);\r\n        const generatedCard = generateBingoCard(number);\r\n        setBingoCard(generatedCard);\r\n        setMarkedNumbers([]);\r\n        setBingo(false);\r\n        setIsCardSelected(false);\r\n    };\r\n\r\n    // Handle confirming the card selection\r\n    const handleCardSelect = () => {\r\n        if (selectedNumber) {\r\n            setIsCardSelected(true);\r\n            startTimer();\r\n        } else {\r\n            alert('Please select a number from the grid first!');\r\n        }\r\n    };\r\n\r\n    // Toggle marking a number on the card\r\n    const toggleMarkNumber = (rowIndex, cellIndex) => {\r\n        const number = bingoCard[rowIndex][cellIndex];\r\n        setMarkedNumbers(prev =>\r\n            prev.includes(number) ? prev.filter(n => n !== number) : [...prev, number]\r\n        );\r\n    };\r\n\r\n    // Check if the player has won Bingo\r\n    const checkBingo = () => {\r\n        const rows = bingoCard.some(row => row.every(number => markedNumbers.includes(number)));\r\n        const cols = bingoCard[0].some((_, i) => bingoCard.every(row => markedNumbers.includes(row[i])));\r\n        const diag1 = bingoCard.every((row, i) => markedNumbers.includes(row[i]));\r\n        const diag2 = bingoCard.every((row, i) => markedNumbers.includes(row[4 - i]));\r\n\r\n        if (rows || cols || diag1 || diag2) {\r\n            setBingo(true);\r\n            alert('Bingo! You win!');\r\n        } else {\r\n            alert('Not Bingo yet! Keep going!');\r\n        }\r\n    };\r\n\r\n    // Start the timer to call out Bingo numbers\r\n    const startTimer = () => {\r\n        const calledNumbersSet = new Set(calledNumbers); // Use a Set to track called numbers\r\n        const maxNumber = 75; // Maximum number in the Bingo card\r\n    \r\n        const interval = setInterval(() => {\r\n            let call;\r\n            let number;\r\n            let letter;\r\n    \r\n            // Generate a unique call\r\n            do {\r\n                letter = BINGO_LETTERS[Math.floor(Math.random() * BINGO_LETTERS.length)];\r\n                \r\n                switch (letter) {\r\n                    case 'B':\r\n                        number = Math.floor(Math.random() * 15) + 1; // 1-15\r\n                        break;\r\n                    case 'I':\r\n                        number = Math.floor(Math.random() * 15) + 16; // 16-30\r\n                        break;\r\n                    case 'N':\r\n                        number = Math.floor(Math.random() * 15) + 31; // 31-45\r\n                        break;\r\n                    case 'G':\r\n                        number = Math.floor(Math.random() * 15) + 46; // 46-60\r\n                        break;\r\n                    case 'O':\r\n                        number = Math.floor(Math.random() * 15) + 61; // 61-75\r\n                        break;\r\n                    default:\r\n                        number = Math.floor(Math.random() * maxNumber) + 1;\r\n                }\r\n    \r\n                call = `${letter}${number}`;\r\n            } while (calledNumbersSet.has(call) && calledNumbersSet.size < maxNumber); // Ensure it's unique and within range\r\n    \r\n            setCurrentCall(call);\r\n            setCalledNumbers(prev => [...prev, call]);\r\n            calledNumbersSet.add(call); // Update the Set with the new call\r\n        }, 5000); // 5-second intervals\r\n    \r\n        setTimer(interval);\r\n    };\r\n    \r\n\r\n    // Cleanup timer on component unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, [timer]);\r\n\r\n    // Toggle dark mode\r\n    const toggleDarkMode = () => {\r\n        setDarkMode(!darkMode);\r\n        document.body.classList.toggle('dark-mode');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Dark mode toggle */}\r\n            <button onClick={toggleDarkMode}>\r\n                {darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\r\n            </button>\r\n            {!isCardSelected ? (\r\n                <div className=\"container\">\r\n                    <h2>Select a Number to Get Your Bingo Card</h2>\r\n                    <div className=\"number-grid\">\r\n                        {numbersToDisplay.map(number => (\r\n                            <div\r\n                                key={number}\r\n                                className={`number-grid-item ${selectedNumber === number ? 'selected' : ''}`}\r\n                                onClick={() => handleNumberClick(number)}\r\n                            >\r\n                                {number}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"pagination-buttons\">\r\n                        <button onClick={handlePrevPage} disabled={currentPage === 1}>Previous</button>\r\n                        <button onClick={handleNextPage} disabled={currentPage === 2}>Next</button>\r\n                    </div>\r\n                    {selectedNumber && (\r\n                        <>\r\n                            {/* Display the Bingo card when a number is selected */}\r\n                            <div className=\"bingo-card-container\">\r\n                                <h3>Your Bingo Card (Card #{selectedNumber})</h3>\r\n                                <div className=\"bingo-card\">\r\n                                    <div className=\"bingo-header\">\r\n                                        {BINGO_LETTERS.map((letter, index) => (\r\n                                            <div key={index} className=\"bingo-header-cell\">{letter}</div>\r\n                                        ))}\r\n                                    </div>\r\n                                    <div className=\"bingo-body\">\r\n                                        {bingoCard && bingoCard.map((row, rowIndex) => (\r\n                                            <div key={rowIndex} className=\"bingo-row\">\r\n                                                {row.map((cell, cellIndex) => (\r\n                                                    <div\r\n                                                        key={cellIndex}\r\n                                                        className={`bingo-cell ${markedNumbers.includes(cell) ? 'marked' : ''}`}\r\n                                                        onClick={() => toggleMarkNumber(rowIndex, cellIndex)}\r\n                                                    >\r\n                                                        {cell === '★' ? '★' : cell}\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <button onClick={handleCardSelect} className=\"select-card-button\">\r\n                                Start Game\r\n                            </button>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div className=\"container\">\r\n                    <h3>Game in progress</h3>\r\n                    <p>Current Call: {currentCall}</p>\r\n                    <div className=\"called-numbers\">\r\n                        <h4>Called Numbers History:</h4>\r\n                        <div className=\"called-numbers-list\">\r\n                            {calledNumbers.map((call, index) => (\r\n                                <span key={index} className=\"called-number\">{call}</span>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bingo-card\">\r\n                        <div className=\"bingo-header\">\r\n                            {BINGO_LETTERS.map((letter, index) => (\r\n                                <div key={index} className=\"bingo-header-cell\">{letter}</div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"bingo-body\">\r\n                            {bingoCard.map((row, rowIndex) => (\r\n                                <div key={rowIndex} className=\"bingo-row\">\r\n                                    {row.map((cell, cellIndex) => (\r\n                                        <div\r\n                                            key={cellIndex}\r\n                                            className={`bingo-cell ${markedNumbers.includes(cell) ? 'marked' : ''}`}\r\n                                            onClick={() => toggleMarkNumber(rowIndex, cellIndex)}\r\n                                        >\r\n                                            {cell === '★' ? '★' : cell}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <button onClick={checkBingo}>Check Bingo</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Bingo card generation logic\r\nconst generateBingoCard = (seed) => {\r\n    const card = [];\r\n    const random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n        const column = [];\r\n        let min, max;\r\n\r\n        switch (i) {\r\n            case 0: // B\r\n                min = 1;\r\n                max = 15;\r\n                break;\r\n            case 1: // I\r\n                min = 16;\r\n                max = 30;\r\n                break;\r\n            case 2: // N\r\n                min = 31;\r\n                max = 45;\r\n                break;\r\n            case 3: // G\r\n                min = 46;\r\n                max = 60;\r\n                break;\r\n            case 4: // O\r\n                min = 61;\r\n                max = 75;\r\n                break;\r\n            default:\r\n                min = 1;\r\n                max = 75;\r\n        }\r\n\r\n        for (let j = 0; j < 5; j++) {\r\n            let num;\r\n            do {\r\n                num = random(min, max);\r\n            } while (column.includes(num));\r\n            column.push(num);\r\n        }\r\n        card.push(column);\r\n    }\r\n\r\n    card[2][2] = '★'; // Middle cell as a star\r\n    return card[0].map((_, colIndex) => card.map(row => row[colIndex]));\r\n};\r\n\r\nexport default GamePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}