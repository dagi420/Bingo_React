{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dagio\\\\OneDrive\\\\Documents\\\\Projects\\\\Bingo_React\\\\src\\\\components\\\\GamePage.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styles from './GamePage.module.css';\nconst BINGO_LETTERS = ['B', 'I', 'N', 'G', 'O'];\nconst GamePage = () => {\n  const location = useLocation();\n  const {\n    bingoCard\n  } = location.state || {\n    bingoCard: []\n  }; // Default to an empty array if no bingoCard is passed\n\n  const [markedNumbers, setMarkedNumbers] = useState([bingoCard[2][2]]); // Automatically mark the center cell\n  const [calledNumbers, setCalledNumbers] = useState([]);\n  const [currentCall, setCurrentCall] = useState('');\n  const [countdown, setCountdown] = useState(5); // Countdown state\n  const timerRef = useRef(null); // Use useRef to store the interval ID\n\n  // Toggle marking a number on the card\n  const toggleMarkNumber = (rowIndex, cellIndex) => {\n    const number = bingoCard[rowIndex][cellIndex];\n    setMarkedNumbers(prev => prev.includes(number) ? prev.filter(n => n !== number) : [...prev, number]);\n  };\n\n  // Check if the player has won Bingo\n  const checkBingo = () => {\n    const isSubset = markedNumbers.every(number => calledNumbers.includes(number));\n    // Add your bingo checking logic here\n  };\n\n  // Add other game logic here...\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.gamePage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Bingo Game\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.bingoCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, bingoCard.map((row, rowIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: rowIndex,\n    className: styles.bingoRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, row.map((cell, cellIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: cellIndex,\n    className: `${styles.bingoCell} ${markedNumbers.includes(cell) ? styles.marked : ''}`,\n    onClick: () => toggleMarkNumber(rowIndex, cellIndex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 29\n    }\n  }, cell))))));\n};\nexport default GamePage;","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","styles","BINGO_LETTERS","GamePage","location","bingoCard","state","markedNumbers","setMarkedNumbers","calledNumbers","setCalledNumbers","currentCall","setCurrentCall","countdown","setCountdown","timerRef","toggleMarkNumber","rowIndex","cellIndex","number","prev","includes","filter","n","checkBingo","isSubset","every","createElement","className","gamePage","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","row","key","bingoRow","cell","bingoCell","marked","onClick"],"sources":["C:/Users/dagio/OneDrive/Documents/Projects/Bingo_React/src/components/GamePage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from './GamePage.module.css';\r\n\r\nconst BINGO_LETTERS = ['B', 'I', 'N', 'G', 'O'];\r\n\r\nconst GamePage = () => {\r\n    const location = useLocation();\r\n    const { bingoCard } = location.state || { bingoCard: [] }; // Default to an empty array if no bingoCard is passed\r\n\r\n    const [markedNumbers, setMarkedNumbers] = useState([bingoCard[2][2]]); // Automatically mark the center cell\r\n    const [calledNumbers, setCalledNumbers] = useState([]);\r\n    const [currentCall, setCurrentCall] = useState('');\r\n    const [countdown, setCountdown] = useState(5); // Countdown state\r\n    const timerRef = useRef(null); // Use useRef to store the interval ID\r\n\r\n    // Toggle marking a number on the card\r\n    const toggleMarkNumber = (rowIndex, cellIndex) => {\r\n        const number = bingoCard[rowIndex][cellIndex];\r\n        setMarkedNumbers(prev =>\r\n            prev.includes(number) ? prev.filter(n => n !== number) : [...prev, number]\r\n        );\r\n    };\r\n\r\n    // Check if the player has won Bingo\r\n    const checkBingo = () => {\r\n        const isSubset = markedNumbers.every(number => calledNumbers.includes(number));\r\n        // Add your bingo checking logic here\r\n    };\r\n\r\n    // Add other game logic here...\r\n\r\n    return (\r\n        <div className={styles.gamePage}>\r\n            <h1>Bingo Game</h1>\r\n            <div className={styles.bingoCard}>\r\n                {bingoCard.map((row, rowIndex) => (\r\n                    <div key={rowIndex} className={styles.bingoRow}>\r\n                        {row.map((cell, cellIndex) => (\r\n                            <div\r\n                                key={cellIndex}\r\n                                className={`${styles.bingoCell} ${markedNumbers.includes(cell) ? styles.marked : ''}`}\r\n                                onClick={() => toggleMarkNumber(rowIndex, cellIndex)}\r\n                            >\r\n                                {cell}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {/* Add other game UI elements here... */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GamePage;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE/C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACnB,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEK;EAAU,CAAC,GAAGD,QAAQ,CAACE,KAAK,IAAI;IAAED,SAAS,EAAE;EAAG,CAAC,CAAC,CAAC;;EAE3D,MAAM,CAACE,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,CAACQ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvE,MAAM,CAACI,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAMkB,QAAQ,GAAGhB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/B;EACA,MAAMiB,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;IAC9C,MAAMC,MAAM,GAAGd,SAAS,CAACY,QAAQ,CAAC,CAACC,SAAS,CAAC;IAC7CV,gBAAgB,CAACY,IAAI,IACjBA,IAAI,CAACC,QAAQ,CAACF,MAAM,CAAC,GAAGC,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKJ,MAAM,CAAC,GAAG,CAAC,GAAGC,IAAI,EAAED,MAAM,CAC7E,CAAC;EACL,CAAC;;EAED;EACA,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,QAAQ,GAAGlB,aAAa,CAACmB,KAAK,CAACP,MAAM,IAAIV,aAAa,CAACY,QAAQ,CAACF,MAAM,CAAC,CAAC;IAC9E;EACJ,CAAC;;EAED;;EAEA,oBACIvB,KAAA,CAAA+B,aAAA;IAAKC,SAAS,EAAE3B,MAAM,CAAC4B,QAAS;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5BvC,KAAA,CAAA+B,aAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,YAAc,CAAC,eACnBvC,KAAA,CAAA+B,aAAA;IAAKC,SAAS,EAAE3B,MAAM,CAACI,SAAU;IAAAyB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5B9B,SAAS,CAAC+B,GAAG,CAAC,CAACC,GAAG,EAAEpB,QAAQ,kBACzBrB,KAAA,CAAA+B,aAAA;IAAKW,GAAG,EAAErB,QAAS;IAACW,SAAS,EAAE3B,MAAM,CAACsC,QAAS;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC1CE,GAAG,CAACD,GAAG,CAAC,CAACI,IAAI,EAAEtB,SAAS,kBACrBtB,KAAA,CAAA+B,aAAA;IACIW,GAAG,EAAEpB,SAAU;IACfU,SAAS,EAAE,GAAG3B,MAAM,CAACwC,SAAS,IAAIlC,aAAa,CAACc,QAAQ,CAACmB,IAAI,CAAC,GAAGvC,MAAM,CAACyC,MAAM,GAAG,EAAE,EAAG;IACtFC,OAAO,EAAEA,CAAA,KAAM3B,gBAAgB,CAACC,QAAQ,EAAEC,SAAS,CAAE;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEpDK,IACA,CACR,CACA,CACR,CACA,CAEJ,CAAC;AAEd,CAAC;AAED,eAAerC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}